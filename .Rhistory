> sapply(mydata[2],med)
> sapply(mydata[2],range)
> sapply(mydata[2],quantile)
> sapply(mydata[2],median)
sapply(mydata[2],median)
mydata <- read.table("C:/data/primary1.csv", skip=1, header=TRUE, col.names=c("Year","Blank","Enrollment"), sep="^")
keeps <- c("Year","Enrollment")
mydata <- mydata[keeps]
install.packages("pastecs")
library(pastecs)
stat.desc(mydata[,2],basic=F)
sapply(mydata[2],mean)
sapply(mydata[2],sd)
sapply(mydata[2],var)
sapply(mydata[2],min)
sapply(mydata[2],max)
sapply(mydata[2],med)
sapply(mydata[2],range)
sapply(mydata[2],quantile)
sapply(mydata[2],median)
mydata <- read.table("C:/data/primary1.csv", skip=1, header=TRUE, col.names=c("Year","Blank","Enrollment"), sep="^")
keeps <- c("Year","Enrollment")
mydata <- mydata[keeps]
install.packages("pastecs")
library(pastecs)
stat.desc(mydata[,2],basic=F)
sapply(mydata[2],mean)
sapply(mydata[2],sd)
sapply(mydata[2],var)
sapply(mydata[2],min)
sapply(mydata[2],max)
sapply(mydata[2],med)
sapply(mydata[2],range)
sapply(mydata[2],quantile)
sapply(mydata[2],median)
boxplot(mydata[2])
barchart(mydata[2])
bar(mydata[2])
barploy(mydata[2])
barplot(mydata[2])
barplot(mydata[,2])
barplot(mydata[1,2])
barplot(mydata[,2])
barplot(mydata[,2],main="Enrolment")
barplot(mydata[,2],main="Enrolment",xlab=mydata[1,])
barplot(mydata[,2],main="Enrolment",xlab="Years")
barplot(mydata[,2],main="Enrolment",xlab="Years",names.arg=c(mydata[1,])
)
barplot(mydata[,2],main="Enrolment",xlab="Years")
years <- mydata[1,]
years
years <- as.vector(mydata[1])
years
barplot(mydata[,2],main="Enrolment",xlab="Years",names.arg=years)
barplot(mydata[,2],main="Enrolment",xlab="Years")
barplot(mydata[,2],main="Enrolment",xlab="Years",las=1)
barplot(mydata[,2],main="Enrolment",xlab="Years",las=1,names.arg=years)
barplot(mydata[,2],main="Enrolment",xlab="Years",las=2,names.arg=years)
barplot(mydata[,2],main="Enrolment",xlab="Years",las=3,names.arg=years)
barplot(mydata[,2],main="Enrolment",xlab="Years",las=4,names.arg=years)
barplot(mydata[,2],main="Enrolment",xlab="Years",las=2,names.arg=years)
years <- as.array(mydata[1])
years <- as.array(mydata[1,])
years <- as.vector(mydata[1])
years <- as.array(years)
years <- [2, 4, 6, 8]
years <- (2, 4, 6, 8)
years <- {2, 4, 6, 8}
years <- as.vector(mydata[1])
years
barplot(mydata[,2],main="Enrolment",xlab="Years")
barplot(mydata[,2],main="Enrolment",xlab="Years",names.arg=year)
barplot(mydata[,2],main="Enrolment",xlab="Years",names.arg=years)
year
years
years <- as.character(years)
years
years <- as.numeric(years)
years
years <- as.vector(as.numeric(mydata[1]))
years <- as.numeric(mydata[1])
years <- as.vector(mydata[1])
years
yearf <- factor(years)
yearf
years
barplot(mydata)
years <- as.matrix(mydata)
years
barplot(years)
barplot(years[2])
barplot(years[1])
year
years
barplot(years[2])
barplot(years)
barplot(years["Enrollment"])
years <- as.matrix(mydata[2])
years
barplot(years)
height <- as.vector(mydata[2])
height
barplot(height)
height <- as.vector(height)
height
barplot(height)
height <- table(mydata$Enrollment)
height
barplot(height)
height <- table(mydata)
height
height
height <- table(mydata)
height
year <- table(mydata[1])
year
str(mydata)
str(year)
year <- talbe(mydata)
year <- table(mydata)
str(year)
row.names(mydata) <- mydata[1]
row.names(mydata) <- as.vector(mydata[1])
row.names(mydata) <- table(mydata[1])
mydata
newmydata <- mydata(row.names(1))
mydata <- read.table("C:/data/primary1.csv", skip=1, header=TRUE, col.names=c("Year","Blank","Enrollment"), sep="^")
newmydata <- read.table(("C:/data/primary1.csv", skip=1, header=TRUE, row.names=1, col.names=c("Blank","Enrollment"), sep="^")
newmydata <- read.table("C:/data/primary1.csv", skip=1, header=TRUE, row.names=1, col.names=c("Blank","Enrollment"), sep="^")
newmydata <- read.table("C:/data/primary1.csv", skip=2, header=FALSE, row.names=1, col.names=c("Blank","Enrollment"), sep="^")
newmydata <- read.table("C:/data/primary1.csv", skip=2, header=FALSE, row.names=1, col.names=c("Year", "Blank","Enrollment"), sep="^")
newmydata
newmydata <- read.table("C:/data/primary1.csv", skip=2, header=FALSE, row.names=1, col.names=c("Year", "Blank","Enrollment"), sep="^")
keeps <- c("Enrollment")
newmydata <- newmydata[keeps]
newmydata
barplot(newmydata)
mytable <- table(newmydata)
mytable
barplot(mytable)
mytable <- as.vector(newmydata)
barplot(mytable)
barplot(mytable[1])
mytable
barplot(mytable[,1])
barplot(table[,2])
barplot(mydata[,2])
barplot(mydata[2])
barplot(as.vector(mydata[2]))
boxplot(mydata)
boxplot(mydata[2])
boxplot(mydata[,2])
boxplot(mydata)
str(mydata)
boxplot(mydata$Enrollment)
barplot(mydata$Enrollment)
barplot(mydata$Enrollment,col.names=mydata$Year)
years <- mydata$Year
years
barplot(mydata$Enrollment,col.names=years)
years
years <- as.character(years)
years
barplot(mydata$Enrollment,col.names=years)
barplot(mydata$Enrollment,cols.name=years)
barplot(mydata$Enrollment,names.arg=years)
barplot(mydata$Enrollment,names.arg=mydata$Years)
mydata$Years
barplot(mydata$Enrollment,names.arg=mydata$Year)
barplot(mydata$Enrollment)
barplot(mydata$Enrollment,names.arg=mydata$Year)
barplot(mydata$Enrollment)
barplot(mydata$Enrollment,main="Enrollment over the years")
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Years)
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Year)
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Year,las=2)
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Year,las=3)
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Year,las=1)
barplot(mydata$Enrollment,main="Enrollment over the years",names.arg=mydata$Year,las=2)
cor()
> install.packages("cars")
install.packages("cars")
library(ggplot2)
utils:::menuInstallPkgs()
x <- 50 + 20*rnorm(100)
x
ggplot(x)
library(ggplot2)
ggplot(x)
ggplot2(x)
qplot(x)
qplot(x) + geom_boxplot()
p <- ggplot(x)
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p <- ggplot(x, aes(factor(cyl), mpg))
p <- ggplot(x, aes(x))
q()
getwd()
wd <- getwd()
wd
setwd(wd)
getwd()
df <- read.csv("loansData")
df <- read.csv("loansData.csv")
dim(df)
names(df)
sum(is.na(df))
summary(df)
names(df)
plot(df$Interest.Rate, df$Amount.Requested)
plot(df$Interest.Rate, df$Amount.Requested,pch=18)
plot(df$Interest.Rate, df$Amount.Requested,pch=19)
plot(df$Amount.Requested, df$Interest.Rate,pch=19)
plot(df$Amount.Requested, df$Interest.Rate)
plot
plot()
plot(df$Monthly.Income, df$Interest.Rate,pch=19)
plot(df$FICO.Range, df$Interest.Rate,pch=19)
lm(df$Interest.Rate ~ df$Amount.Requested)
class(names(df))
sapply(df,class)
sapply(df,class())
sapply(df,class)
summary(df)
head(df)
as.numeric(df$Interest.Rate)
head(df$Interest.Rate)
df$Interest.Rate[1:5]
df$Interest.Rate[1]
df$Interest.Rate
df$Interest.Rate[1]
as.numeric(df$Interest.Rate[1])
ncol(df)
lmtest <- function(x, target){
for(i in ncol(x))
{
print(i)
}
}
lmtest(df,4)
lmtest <- function(x, target){
for(i in 1:ncol(x))
{
print(i)
}
}
lmtest(df,4)
df[,2]
df[,1]
df[,5]
sapply(df,class)
lm(df[,3] ~ df[,5])
attach()
attach
lm(df[,3] ~ df[,5])
lm(df[,3] ~ df[,1])
lm(factor(df$Interest.Rate) ~ df$Amount.Requested)
lm(df$Amount.Requested ~ factor(df$Interest.Rate))
sapply(df,class)
lm1 <- lm(df$Interest.Rate ~ df$Amount.Request)
summary(lm1)
new <- gsub("%", "", df$Interest.Rate)
new
as.numeric(new)
interest <- gsub("%","",df$Interest.Rate)
class(interest)
as.numeric(interst)
as.numeric(interest)
df$interst <- interest
dim(df)
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
lm(df$interest, df$Amount.Loan)
lm(df$interest ~ df$Amount.Loan)
lm(df$interest ~ df$Loan.Amount)
names(df)
lm(df$interest ~ df$Amount.Requested)
lm1 <- lm(df$interest ~ df$Amount.Requested)
lm1
plot(df$Amount.Requested, df$Interest.Rate,pch=19)
plot(df$Amount.Requested, df$interest,pch=19)
par(mfrow=c(2,2))
plot(df$Amount.Requested, df$Interest.Rate,pch=19)
plot(df$Monthly.Income, df$Interest.Rate,pch=19)
plot(df$Amount.Requested, df$interest,pch=19)
sapply(df,class)
head(df)
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
debtratio <- gsub("%","",df$Debt.To.Income.Ratio)
df$debtratio <- as.numberic(debtratio)
loanlength <- gsub(" months","",df$Loan.Length)
df$loanlenght <- as.numeric(loanlength)
# exploratory plots
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
#convert interest rate to numeric and add to dataframe
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
debtratio <- gsub("%","",df$Debt.To.Income.Ratio)
df$debtratio <- as.numberic(debtratio)
loanlength <- gsub(" months","",df$Loan.Length)
df$loanlength <- as.numeric(loanlength)
# exploratory plots
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
dim(df)
names(df)
df <- subset(df,select=c(1:16,18)
)
names(df)
df <- subset(df,select=c(1:14,16,17))
names(df)
q()
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
library(ElemStatLearn)
library
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
data(zip.train)
library(ElemStatLearn)
data(zip.train)
str(zip.train)
head(zip.train)
im = zip2image(zip.train,3)
image(im)
im8 = zip2image(zip.train,8)
im12 = zip2image(zip.train,12)
im18 = zip2image(zip.train,18)
image(8)
image(im8)
image(im18)
svd8 <- svd(im8)
svd18 <- svd(im18)
names(svd8)
svd$v
head(svd8)
plot)svd8^2.sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8^2.sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8$d^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
im8 = zip2image(zip.train,8)
im18 = zip2image(zip.train,18)
image(im8)
image(im18)
svd8 <- svd(im8)
svd18 <- svd(im18)
par(mfrow=c(1,2))
plot(svd8$d^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
image(im18)
q()
install.packages("RCurl")
data(warpbreaks)
warpbreaks
names(warpbreaks)
ao <- aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
ao
summary(ao)
log(0.25)
library(glm2)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(glm2)
library(glm)
utils:::menuInstallPkgs()
library(glm2)
data(crabs)
crabs
names(crabs)
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
glm1
head(crabs)
glm1
summary(glm1)
names(glm1)
glm1$coefficients
glm1$coefficients[2]
exp(glm1$coefficients[2])
summary(ao)
summary(glm1)
exp(glm1$coefficients) * exp(glm1$coefficients * 22)
exp(glm1$coefficients[1]) * exp(glm1$coefficients[2] * 22)
crabs
crabs[crabs$Width=22, ]
crabs[crabs$Width==22, ]
crabs[crabs$Width<=22, ]
crabs[crabs$Width<=23, ]
data(quine)
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
data(quine)
quine
load.package(MASS)
loadpackage(MASS)
package(MASS)
load(MASS)
lm1 = lm
lm1 = lm(log(Days + 2.5) ~., data=quine)
lm1
aic <- step(lm1)
aic
q()
## This is a markdown file
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function is used to store a created matrix and it's inverse
## setinverse function allows users to input inverse of matrix
## getinverse fucntion allows users to retrieve stored inverse of matrix
makeCacheMatrix <- function(x = matrix()) {
   m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setinverse <- function(input) m <<- input
        getinverse <- function() m
        list(set = set, get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}
## Write a short comment describing this function
## This function will check if inverse of matrix is already cached
## if yes, it will retrieve it, if not, it will compute and store it 
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
   m <- x$getinverse()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setinverse(m)
        m
}
makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2)
)
makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x
x$getinverse
cacheSolve(x)
x$getinverse
x$get
x <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function is used to store a created matrix and it's inverse
## setinverse function allows users to input inverse of matrix
## getinverse fucntion allows users to retrieve stored inverse of matrix
makeCacheMatrix <- function(x = matrix()) {
   m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setinverse <- function(input) m <<- input
        getinverse <- function() m
        list(set = set, get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}
## Write a short comment describing this function
## This function will check if inverse of matrix is already cached
## if yes, it will retrieve it, if not, it will compute and store it 
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
   m <- x$getinverse()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setinverse(m)
        m
}
x <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get
x$get()
x$getinverse()
cacheSolve(x)
x$getinverse()
q()
